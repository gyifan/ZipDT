#ifndef _H_CONTOUR_AREA_H_
#define _H_CONTOUR_AREA_H_

#include <linux/ioctl.h>

#define AREA_DEV_PATH	"/dev/contour_area"
#define DEV_NAME	"contour_area"
#define DEV_PATH	"/dev/"DEV_NAME
#define DEV_MAJOR	64
#define IRQ		87		 
#define ADDRESS		0x7A400000
#define CONTOUR_AREA_ADDRESS	ADDRESS
#define SIZE		0x10000
#define CONTOUR_AREA_ADDR_SIZE	SIZE

#define FRAME_SIZE	0x200000
#define FRAME_OFFSET	FRAME_SIZE
#define FRAME_1_ADDRESS	0x1FC00000
#define FRAME_2_ADDRESS FRAME_1_ADDRESS + FRAME_SIZE

//Register info for userspace accesses
#define CTL_REG			ADDR_OFFSET_CTRL
#define ELEM_COUNT_REG		ADDR_OFFSET_ELEM_CNT
#define RETURN_REG		ADDR_OFFSET_RETVAL

//IOCTL commands
#define SELECT_REG	_IOW(DEV_MAJOR, 0, int)
#define ACCEL_START	_IO(DEV_MAJOR, 1)

//CONTROL MASKS
#define CTRL_START_BIT		1<<0
#define CTRL_DONE_BIT		1<<1
#define CTRL_IDLE_BIT		1<<2
#define CTRL_READY_BIT		1<<3
#define CTRL_ARESTART_BIT	1<<7
#define CONTOUR_AREA_CTRL_START_BIT		CTRL_START_BIT		
#define CONTOUR_AREA_CTRL_DONE_BIT		CTRL_DONE_BIT		
#define CONTOUR_AREA_CTRL_IDLE_BIT		CTRL_IDLE_BIT		
#define CONTOUR_AREA_CTRL_READY_BIT		CTRL_READY_BIT		
#define CONTOUR_AREA_CTRL_ARESTART_BIT		CTRL_ARESTART_BIT	

//Global interrupt enable masks
#define IER_GLOBAL_BIT	1<<0
#define CONTOUR_AREA_IER_GLOBAL_BIT	IER_GLOBAL_BIT

//IP Interrupt enable register masks
#define IER_DONE_BIT	1<<0
#define IER_READY_BIT	1<<1
#define CONTOUR_AREA_IER_DONE_BIT	IER_DONE_BIT
#define CONTOUR_AREA IER_READY_BIT	IER_READY_BIT

//IP Interrupt status register masks
#define ISR_DONE_BIT	1<<0
#define ISR_READY_BIT	1<<1
#define CONTOUR_AREA_ISR_DONE_BIT	ISR_DONE_BIT	
#define CONTOUR_AREA_ISR_READY_BIT	ISR_READY_BIT	

#define ADDR_OFFSET_CTRL	0x00
#define ADDR_OFFSET_GIE		0x04
#define ADDR_OFFSET_IER		0x08
#define ADDR_OFFSET_ISR		0x0c
#define ADDR_OFFSET_ELEM_CNT	0x14
#define ADDR_OFFSET_RETVAL	0x18
#define CONTOUR_AREA_ADDR_OFFSET_CTRL		ADDR_OFFSET_CTRL	
#define CONTOUR_AREA_ADDR_OFFSET_GIE		ADDR_OFFSET_GIE		
#define CONTOUR_AREA_ADDR_OFFSET_IER		ADDR_OFFSET_IER		
#define CONTOUR_AREA_ADDR_OFFSET_ISR		ADDR_OFFSET_ISR		
#define CONTOUR_AREA_ADDR_OFFSET_ELEM_CNT	ADDR_OFFSET_ELEM_CNT	
#define CONTOUR_AREA_ADDR_OFFSET_RETVAL		ADDR_OFFSET_RETVAL	


// VVVVVVV For reference VVVVVVV
// ==============================================================
// // File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// // Version: 2012.4
// // Copyright (C) 2012 Xilinx Inc. All rights reserved.
// // 
// // ==============================================================
//
// // 0x00 : Control signals
// //        bit 0  - ap_start (Read/Write/COH)
// //        bit 1  - ap_done (Read/COR)
// //        bit 2  - ap_idle (Read)
// //        bit 3  - ap_ready (Read)
// //        bit 7  - auto_restart (Read/Write)
// //        others - reserved
// // 0x04 : Global Interrupt Enable Register
// //        bit 0  - Global Interrupt Enable (Read/Write)
// //        others - reserved
// // 0x08 : IP Interrupt Enable Register (Read/Write)
// //        bit 0  - Channel 0 (ap_done)
// //        bit 1  - Channel 1 (ap_ready)
// //        others - reserved
// // 0x0c : IP Interrupt Status Register (Read/TOW)
// //        bit 0  - Channel 0 (ap_done)
// //        bit 1  - Channel 1 (ap_ready)
// //        others - reserved
// // 0x10 : reserved
// // 0x14 : Data signal of total_elem
// //        bit 31~0 - total_elem[31:0] (Read/Write)
// // 0x18 : Data signal of ap_return
// //        bit 31~0 - ap_return[31:0] (Read)
// // (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)
#endif
